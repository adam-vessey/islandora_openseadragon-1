<?php

/**
 * @file
 * Hooks and callbacks for this module.
 */

use Drupal\Core\Url;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Cache\CacheableMetadata;

// @codingStandardsIgnoreStart
const ISLANDORA_OPENSEADRAGON_REQUIRED_VERSION = '2.3.1';
const ISLANDORA_OPENSEADRAGON_DEFAULT_TILE_SIZE = 256;
const ISLANDORA_OPENSEADRAGON_DEFAULT_TILE_OVERLAP = 0;
// @codingStandardsIgnoreEnd

/**
 * Implements hook_theme().
 */
function islandora_openseadragon_theme() {
  return [
    'islandora_openseadragon_viewer' => [
      'variables' => [
        'pid' => NULL,
        'tile_sources' => [],
      ],
      'file' => 'theme/theme.inc',
    ],
    // A link for clipping JP2 datastreams via djatoka.
    'islandora_openseadragon_clipper' => [
      'file' => 'theme/theme.inc',
      'function' => 'islandora_openseadragon_clipper',
      'variables' => [
        'pid' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_islandora_viewer_info().
 */
function islandora_openseadragon_islandora_viewer_info() {
  return [
    // @XXX The element returned has a width:100% but no natural flow width; it
    // is completely dependent on it's parent.
    'islandora_openseadragon' => [
      'label' => t('OpenSeadragon'),
      // Later we'll add DZI too.
      'description' => t('OpenSeadragon viewer.'),
      'configuration' => 'islandora_openseadragon.admin',
      'callback' => 'islandora_openseadragon_callback',
      // DZI has xml as mimetype? Not sure how to handle that.
      'mimetype' => ['image/jp2'],
    ],
  ];
}

/**
 * Callback function for the viewer.
 *
 * @param array $params
 *   Params required by the theme. We require the keys:
 *   - pid: The PID of the object.
 *   - dsid: This DSID being displayed.
 *   - token: The token we are working with.
 * @param AbstractObject $object
 *   The object that we are viewing.
 *
 * @return string
 *   HTML representation of the OpenSeadragon viewer
 */
function islandora_openseadragon_callback(array $params = [], AbstractObject $object = NULL) {
  module_load_include('inc', 'islandora_openseadragon', 'includes/utilities');

  $cache_meta = (new CacheableMetadata())
    ->addCacheableDependency($object);

  if (isset($params['jp2_url']) && !(isset($params['pid']) && isset($params['dsid']) && isset($params['token']))) {
    $message = islandora_deprecated('7.x-1.11', t('The jp2_url parameter has been depreciated. Please update your code before the next release.'));
    trigger_error(Xss::filter($message), E_USER_DEPRECATED);

    // Try to mangle the jp2_url into the data we need.
    $matches = [];
    preg_match('/object\/([^\/]*)\/datastream\/([^\/]*).*token=([^&]*)/', $params['jp2_url'], $matches);
    $pid = isset($matches[1]) ? $matches[1] : NULL;
    $dsid = isset($matches[2]) ? $matches[2] : NULL;
    $token = isset($matches[3]) ? $matches[3] : NULL;

    if (!isset($params['pid'])) {
      $params['pid'] = urldecode($pid);
    }
    if (!isset($params['dsid'])) {
      $params['dsid'] = urldecode($dsid);
    }
    if (!isset($params['token'])) {
      $params['token'] = urldecode($token);
    }
  }

  if (isset($params['pid']) && isset($params['dsid']) && isset($params['token'])) {
    $renderer = \Drupal::service('renderer');
    $config = \Drupal::config('islandora_openseadragon.settings');

    $param_object = islandora_object_load($params['pid']);
    $cache_meta
      ->addCacheableDependency($config)
      ->addCacheableDependency($param_object)
      ->addCacheableDependency($param_object[$params['dsid']]);

    $token_header = $config->get('islandora_openseadragon_tilesource') == 'iiif'
      && $config->get('islandora_openseadragon_iiif_token_header');
    $tile_sources = islandora_openseadragon_tile_source($params['pid'], $params['dsid'], $params['token']);
    $settings = islandora_openseadragon_get_viewer_settings(
      [
        'pid' => $params['pid'],
        'tile_sources' => $tile_sources,
        'token' => $params['token'],
        'token_header' => $token_header,
      ]
    );

    // XXX: islandora_openseadragon_get_viewer_settings() and
    // islandora_openseadragon_tile_source() makes use of
    // islandora_openseadragon.settings.
    $cache_meta->addCacheableDependency(\Drupal::config('islandora_openseadragon.settings'));

    if ($params['token']) {
      // If a non-empty token was provided, no cache.
      $cache_meta->mergeCacheMaxAge(0);
    }

    $viewer = [
      '#theme' => 'islandora_openseadragon_viewer',
      '#pid' => $params['pid'],
      '#tile_sources' => $tile_sources,
      '#token' => $params['token'],
      '#token_header' => $token_header,
      '#attached' => [
        'drupalSettings' => [
          'islandoraOpenSeadragon' => $settings,
        ],
      ],
    ];

    $cache_meta->applyTo($viewer);

    return $renderer->render($viewer);
  }
}

/**
 * Implements hook_preprocess().
 */
function islandora_openseadragon_preprocess_islandora_object_print(array &$variables) {
  if (isset($_GET['clip'])) {
    module_load_include('inc', 'islandora_openseadragon', 'includes/utilities');
    $clip_parts = islandora_openseadragon_construct_clip_url($_GET['clip']);
    if ($clip_parts) {
      $variables['clip'] = $clip_parts['original_params'];
      $variables['content']['clip'] = [
        '#weight' => 0,
        '#theme' => 'image',
        '#uri' => $clip_parts['image_url'],
        '#attributes' => $clip_parts['dimensions'],
        '#theme_wrappers' => [
          'container' => [
            '#attributes' => [
              'id' => 'clip',
            ],
          ],
        ],
        '#cache' => [
          'contexts' => [
            'url.query_args',
            'user',
          ],
        ],
      ];
    }
    else {
      drupal_set_message(t('Invalid clip parameters passed.'), 'error');
    }
  }
}

/**
 * Implements hook_token_info().
 */
function islandora_openseadragon_token_info() {
  $info = [];

  $info['types']['islandora_openseadragon'] = [
    'name' => t('Islandora Openseadragon'),
    'description' => t('Tokens for building IIIF identifer in Islandora Openseadragon.'),
    'needs-data' => 'islandora_openseadragon',
  ];

  $info['tokens']['islandora_openseadragon']['pid'] = [
    'name' => t('PID'),
    'description' => t('The objects PID.'),
  ];

  $info['tokens']['islandora_openseadragon']['dsid'] = [
    'name' => t('DSID'),
    'description' => t('The objects DSID.'),
  ];

  $info['tokens']['islandora_openseadragon']['url'] = [
    'name' => t('URL'),
    'description' => t('The URL to the object in Islandora.'),
  ];

  $info['tokens']['islandora_openseadragon']['url_token'] = [
    'name' => t('URL with Token'),
    'description' => t('The URL to the object in Islandora with token in the query string.'),
  ];

  $info['tokens']['islandora_openseadragon']['token'] = [
    'name' => t('Token'),
    'description' => t('The token that can be used to access the object in Islandora.'),
  ];

  return $info;
}

/**
 * Implements hook_tokens().
 */
function islandora_openseadragon_tokens($type, $tokens, array $data = [], array $options = []) {
  $replacements = [];

  if ($type != 'islandora_openseadragon' || !isset($data['islandora_openseadragon'])) {
    return $replacements;
  }

  $pid = $data['islandora_openseadragon']['pid'];
  $dsid = $data['islandora_openseadragon']['dsid'];
  $token = $data['islandora_openseadragon']['token'];

  foreach ($tokens as $name => $original) {
    if ($name == 'pid') {
      $replacements[$original] = $pid;
    }
    elseif ($name == 'dsid') {
      $replacements[$original] = $dsid;
    }
    elseif ($name == 'token') {
      $replacements[$original] = $token;
    }
    elseif ($name == 'url' || $name == 'url_token') {
      $options = [
        'absolute' => TRUE,
        'language' => \Drupal::service('language.default')->get(),
        'https' => (function_exists('drupal_is_https') ?
          drupal_is_https() :
          (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) == 'on')
        ),
      ];

      if ($name == 'url_token') {
        $options['query'] = [
          'islandora_token' => $token,
        ];
      }
      $replacements[$original] = Url::fromRoute(
        'islandora.view_datastream_view',
        ['object' => $pid, 'datastream' => $dsid],
        $options
      )->toString();
    }
  }

  return $replacements;
}

/**
 * Implements hook_library_info_alter().
 */
function islandora_openseadragon_library_info_alter(&$libraries, $extension) {
  if ($extension != 'islandora_openseadragon') {
    return;
  }
  $library_path = libraries_get_path('openseadragon');
  $libraries['openseadragon']['js'][file_create_url("$library_path/openseadragon.js")] = [];
}
